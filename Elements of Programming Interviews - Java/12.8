/*package whatever //do not write package name here */

import java.io.*;

class GFG {
	public static void main (String[] args) {
		System.out.println("GfG!");
	}
	public int dSelect(int[] arr, int k){
	    int rand = (int)(Math.random() * arr.length);
	    int i = partition(arr,rand,0,arr.length-1);
	    while(i != k - 1){
	        if(i < k) {
	            rand = (int)(i+1+Math.random()*arr.length);
	            i = partition(arr,rand,i+1,arr.length-1)
	        }
	        else if(i > k){
	            rand = (int)(Math.random() * i);
	            i = partition(arr,rand,0,i-1);
	        }
	    }
	}
	public int partition (int[] arr, int pivot, int start, int end){
    int low = start;
    int high = end-1;
    Arrays.swap(arr, pivot, end);
    while(low < high){
        if(arr[low] < arr[end]){
            low++;
        }
        if(arr[low] > arr[end]){
            Arrays.swap(arr,low,high);
            high--;
        }
    }
    if(arr[low] < arr[end])low++;
    Arrays.swap(arr,end,low);
    return low;
}
}





Random an index (i) in the array.
Partition around the element in that index.
If size of the array on the left side of the elements is k-1 - return arr[k].
If size of the array on the left side of the element is (say N) less then k-1(then the element is on the right side) repeat on the right side with indexes pIndex+1,arr.size-1 and stop when the new left size is of size k-n-1.
If the size of the array on the left side repeat the proccess on the left side with indexes 0,pIndex 
